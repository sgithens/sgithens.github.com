<!doctype html>

<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=1024" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <title>Biobanking Query Data and Retreival</title>
    
    <meta name="description" content="" />
    <meta name="author" content="Steven Githens" />

    <link href="http://fonts.googleapis.com/css?family=Open+Sans:regular,semibold,italic,italicsemibold|PT+Sans:400,700,400italic,700italic|PT+Serif:400,700,400italic,700italic" rel="stylesheet" />

    <link href="css/impress-demo.css" rel="stylesheet" />
    
    <link rel="shortcut icon" href="favicon.png" />
    <link rel="apple-touch-icon" href="apple-touch-icon.png" />

    <link rel="stylesheet" href="./codemirror/lib/codemirror.css">
    <script src="./codemirror/lib/codemirror.js"></script>
    <script src="./codemirror/mode/javascript/javascript.js"></script>
    <script src="./codemirror/keymap/emacs.js"></script>
<style>
.CodeMirror {
  /* border: 1px solid #eee; */
  height: auto;
}
.CodeMirror-scroll {
  overflow-y: hidden;
  overflow-x: auto;
}
</style>
</head>

<body class="impress-not-supported">

<!--
    For example this fallback message is only visible when there is `impress-not-supported` class on body.
-->
<div class="fallback-message">
    <p>Your browser <b>doesn't support the features required</b> by impress.js, so you are presented with a simplified version of this presentation.</p>
    <p>For the best experience please use the latest <b>Chrome</b>, <b>Safari</b> or <b>Firefox</b> browser.</p>
</div>

<!--
    
    Now that's the core element used by impress.js.
    
    That's the wrapper for your presentation steps. In this element all the impress.js magic happens.
    It doesn't have to be a `<div>`. Only `id` is important here as that's how the script find it.
    
    You probably won't need it now, but there are some configuration options that can be set on this element.
    
    To change the duration of the transition between slides use `data-transition-duration="2000"` giving it
    a number of ms. It defaults to 1000 (1s).
    
    You can also control the perspective with `data-perspective="500"` giving it a number of pixels.
    It defaults to 1000. You can set it to 0 if you don't want any 3D effects.
    If you are willing to change this value make sure you understand how CSS perspective works:
    https://developer.mozilla.org/en/CSS/perspective
    
-->
<div id="impress">

<div id="start" class="step slide" data-x="-2000" data-y="-1500" data-scale="2">
    <!-- http://icons8.com/ -->
    
    <q><img src="dna_helix.png" /> <br/>In search of a flexible, open, and extensible visualization and query 
       facility for biobanking.</q>
    <ul>
        <li>Steven Githens</li>
        <li>sgithens@iupui.edu</li>
        <li>https://github.com/sgithens</li>
    </ul>
</div>

<div id="bored" class="step slide" data-x="0" data-y="-1500">
    <q>With a focal point on samples and their derived (meta)data, we need
    a way to find the samples we want.</q>
    <br/>
    <ul> 
        <li>A nice example is <a href="http://www.cbioportal.org/public-portal/">cBioPortal</a></li>
        <li>And a specific sample <a href="http://www.cbioportal.org/public-portal/case.do?cancer_study_id=brca_broad&case_id=BR-M-028">view</a></li>
    </ul>
</div>

<div class="step" style="width:1000px,height:1000px" data-x="1000" data-y="2000">
    <iframe height="600px" width="900px" src="http://www.cbioportal.org/public-portal/"></iframe>
</div>

<div class="step" data-x="2500" data-y="2000">
    <iframe height="600px" width="900px" src="http://www.cbioportal.org/public-portal/case.do?cancer_study_id=brca_broad&case_id=BR-M-028"></iframe>
</div>

<div class="step slide" data-x="1000" data-y="-1500">
    <img  src="datasources.svg" />
</div>

<div class="step slide" data-x="2000" data-y="-1500">
    <q><strong>User Personas</strong></q>
<ul class="todo-items">
<li>Staff, Sample Managment</li>
<li>Research, Education</li>
<li>Interested Public</li>
</ul>
    
</div>

<div class="step slide" data-x="3000" data-y="-1500">
<q>Technical Considerations</q>
<ul class="todo-items">
<li>Results: Sync vs Almost Sync vs Async</li>
<li>Community/Camaraderie (Open Source if possible)</li>
<li>Single Ref point vs Federated / Aggregated Seaerch</li>
<li>Relational DBs / NoSQL / Webservice Endpoints</li>
<li>Num Reads vs Writes</li>
</ul>
</div>

<div class="step slide" data-x="4000" data-y="-1500">
    <q><img src="wheat.svg" height="100px" width="100px"/>
Harvest</q>
<ul class="todo-items">
<li>Modern: Built on Python and Django</li>
<li>Good community, Open Source and Funded</li>
<li>Metadata Management on top of existing ORM Models</li>
<li>Planning on adding other datastore support to Avocado</li>
<li><a href="http://harvest.research.chop.edu/">Homepage</a> and
<a href="http://harvest.research.chop.edu/demo/query/">Demo</a>
</ul>
</div>

<div class="step" style="width:1000px,height:1000px" data-x="2500" data-y="-250">
    <iframe height="600px" width="900px" src="http://harvest.research.chop.edu/"></iframe>
</div>

<div class="step" style="width:1000px,height:1000px" data-x="3000" data-y="600">
    <iframe height="600px" width="900px" src="http://harvest.research.chop.edu/demo/query/"></iframe>
</div>

<div class="step slide" data-x="4000" data-y="-500">
    <q><img src="wheat.svg" height="100px" width="100px"/>
Initial Work Plan
</q>
<ul class="todo-items">
<li>Bootstrap annotation/sample tables with Avocado</li>
<li>Use VCF data as testbed for extending with NGS data</li>
<li>Iteration 1: Encode VCF data in a relational table</li>
<li>Iteration 2: Put a *lot* of VCF data in MongoDB</li>
<li>Questions: When and where to shard nodes</li>
</ul>
</div>

<div class="step slide" data-x="5000" data-y="600">
    <img src="wheat.svg" height="100px" width="100px"/>
<textarea id="code" name="code" rows="40">
// #CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	NA11881_bt2.capture-header.sorted.bam
// chr4	46036709	.	GC	GCC	49.5	.	INDEL;IS=134,0.985294;DP=136;VDB=0.000000e+00;AF1=1;AC1=2;DP4=0,0,0,98;MQ=25;FQ=-290	GT:PL:GQ	1/1:90,255,0:99
// chr4	46036837	.	CTTT	CTT	26.5	.	INDEL;IS=26,0.132653;DP=196;VDB=1.209014e-10;AF1=0.5;AC1=1;DP4=44,0,15,0;MQ=37;FQ=29.5;PV4=1,1,0.15,0.087	GT:PL:GQ	0/1:64,0,103:67

var next = {
  chrom: "chr4",
  pos: 46036709,
  ref: "GC",
  alt: "GCC"
};

db.vcf.insert.(next);
db.vcf.find( { chrom : "chr4", pos: { $gt: 46000000, $lte: 46200000 } );
</textarea>
<script>
var editor = CodeMirror.fromTextArea(document.getElementById('code'), {
  mode: 'text/javascript',
  keyMap: "emacs"
});
</script>
</div>


















    <!--
        
        So to make a summary of all the possible attributes used to position presentation steps, we have:
        
        * `data-x`, `data-y`, `data-z` - they define the position of **the center** of step element on
            the canvas in pixels; their default value is 0;
        * `data-rotate-x`, `data-rotate-y`, 'data-rotate-z`, `data-rotate` - they define the rotation of
            the element around given axis in degrees; their default value is 0; `data-rotate` and `data-rotate-z`
            are exactly the same;
        * `data-scale` - defines the scale of step element; default value is 1
        
        These values are used by impress.js in CSS transformation functions, so for more information consult
        CSS transfrom docs: https://developer.mozilla.org/en/CSS/transform
        
    -->
    <div id="overview" class="step" data-x="2000" data-y="1500" data-scale="10">
    </div>

</div>

<!--
    
    Hint is not related to impress.js in any way.
    
    But it can show you how to use impress.js features in creative way.
    
    When the presentation step is shown (selected) its element gets the class of "active" and the body element
    gets the class based on active step id `impress-on-ID` (where ID is the step's id)... It may not be
    so clear because of all these "ids" in previous sentence, so for example when the first step (the one with
    the id of `bored`) is active, body element gets a class of `impress-on-bored`.
    
    This class is used by this hint below. Check CSS file to see how it's shown with delayed CSS animation when
    the first step of presentation is visible for a couple of seconds.
    
    ...
    
    And when it comes to this piece of JavaScript below ... kids, don't do this at home ;)
    It's just a quick and dirty workaround to get different hint text for touch devices.
    In a real world it should be at least placed in separate JS file ... and the touch content should be
    probably just hidden somewhere in HTML - not hard-coded in the script.
    
    Just sayin' ;)
    
-->
<!--
<div class="hint">
    <p>Use a spacebar or arrow keys to navigate</p>
</div>
-->
<script>
if ("ontouchstart" in document.documentElement) { 
    document.querySelector(".hint").innerHTML = "<p>Tap on the left or right to navigate</p>";
}
</script>

<!--
    
    Last, but not least.
    
    To make all described above really work, you need to include impress.js in the page.
    I strongly encourage to minify it first.
    
    In here I just include full source of the script to make it more readable.
    
    You also need to call a `impress().init()` function to initialize impress.js presentation.
    And you should do it in the end of your document. Not only because it's a good practice, but also
    because it should be done when the whole document is ready.
    Of course you can wrap it in any kind of "DOM ready" event, but I was too lazy to do so ;)
    
-->
<script src="js/impress.js"></script>
<script>impress().init();</script>

<!--
    
    The `impress()` function also gives you access to the API that controls the presentation.
    
    Just store the result of the call:
    
        var api = impress();
    
    and you will get three functions you can call:
    
        `api.init()` - initializes the presentation,
        `api.next()` - moves to next step of the presentation,
        `api.prev()` - moves to previous step of the presentation,
        `api.goto( idx | id | element, [duration] )` - moves the presentation to the step given by its index number
                id or the DOM element; second parameter can be used to define duration of the transition in ms,
                but it's optional - if not provided default transition duration for the presentation will be used.
    
    You can also simply call `impress()` again to get the API, so `impress().next()` is also allowed.
    Don't worry, it wont initialize the presentation again.
    
    For some example uses of this API check the last part of the source of impress.js where the API
    is used in event handlers.
    
-->

</body>
</html>

